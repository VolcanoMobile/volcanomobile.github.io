/* Copyright (C) Volcanomobile, Inc - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential 
 * Written by Volcanomobile <contact@volcanomobile.net>, January 2020 
 */ 

var jMidiAccessApi=function(c){var d={midiSupported:false,midiAccess:null,outputPorts:[],initCallback:null,onRequestMidiAccessSuccess:null,onRequestMIDIAccessFailure:null,deviceStateChangeCallback:null,portDisconnectedCallback:null,portConnectedCallback:null,receiveCallback:null,sendCallback:null,logLevel:jMidiAccessApi.LOG_LEVEL_ERROR};
var b=this;var a=[];this.construct=function(e){$.extend(d,e);this.initMidi()};this.initMidi=function(e){if(d.logLevel>=jMidiAccessApi.LOG_LEVEL_DEBUG){console.log("jMidiAccessApi - Init MIDI")
}if(navigator.requestMIDIAccess){if(d.logLevel>=jMidiAccessApi.LOG_LEVEL_DEBUG){console.log("jMidiAccessApi - MIDI supported")
}d.midiSupported=true;navigator.requestMIDIAccess({sysex:true}).then(this.requestMIDIAccessSuccess,this.requestMIDIAccessFailure)
}else{if(d.logLevel>=jMidiAccessApi.LOG_LEVEL_DEBUG){console.log("jMidiAccessApi - initMidi() MIDI not supported")
}}d.initCallback(d)};this.requestMIDIAccessSuccess=function(e){if(d.logLevel>=jMidiAccessApi.LOG_LEVEL_DEBUG){console.log("jMidiAccessApi - Request MIDI Access Success")
}if(d.logLevel>=jMidiAccessApi.LOG_LEVEL_ALL){console.log("jMidiAccessApi - Request MIDI Access Success, midiAccess: ",d.midiAccess)
}d.midiAccess=e;d.midiAccess.onstatechange=function(f){if(d.logLevel>=jMidiAccessApi.LOG_LEVEL_DEBUG){console.log("jMidiAccessApi - State Change")
}b.addAllOutputPorts();d.deviceStateChangeCallback(f.port,d)};if(d.midiAccess.inputs){d.midiAccess.inputs.forEach(function(f,g){a.push(f)
})}b.initOutputPorts();if(d.onRequestMidiAccessSuccess!=null){d.onRequestMidiAccessSuccess(d)
}};this.requestMIDIAccessFailure=function(e){if(d.logLevel>=jMidiAccessApi.LOG_LEVEL_DEBUG){console.log("jMidiAccessApi - requestMIDIAccessFailure()")
}if(d.onRequestMIDIAccessFailure!=null){d.onRequestMIDIAccessFailure()}};this.bindInputPort=function(e){if(d.logLevel>=jMidiAccessApi.LOG_LEVEL_DEBUG){console.log("jMidiAccessApi - Bind Input Port: "+e.name)
}if(e&&e.onmidimessage==null){e.onmidimessage=this.receive;d.portConnectedCallback(e,d)
}};this.bindInputPortByName=function(f){var e=null;if(d.midiAccess.inputs){d.midiAccess.inputs.forEach(function(g,h){if(g.name==f){e=g
}})}this.bindInputPort(e)};this.unbindInputPort=function(e,f){if(d.logLevel>=jMidiAccessApi.LOG_LEVEL_DEBUG){console.log("jMidiAccessApi - Unbind Input Port: "+f.name)
}if(f&&f.onmidimessage!=null){f.onmidimessage=null;d.portDisconnectedCallback(f,d)
}};this.unbindInputPortByName=function(g){var e=null;var f=null;if(d.midiAccess.inputs){d.midiAccess.inputs.forEach(function(h,i){if(h.name==g){e=h;
f=h}})}this.unbindInputPort(e,f)};this.initOutputPorts=function(){if(d.logLevel>=jMidiAccessApi.LOG_LEVEL_ALL){console.log("jMidiAccessApi - initOutputPorts()")
}this.addAllOutputPorts()};this.addAllOutputPorts=function(){if(d.logLevel>=jMidiAccessApi.LOG_LEVEL_ALL){console.log("jMidiAccessApi - addAllOutputPorts()")
}if(d.midiAccess){d.midiAccess.outputs.forEach(function(e){b.addOutputPort(e)})}else{if(d.logLevel>=jMidiAccessApi.LOG_LEVEL_DEBUG){console.log("jMidiAccessApi - addAllOutputPorts() midiAccess is NULL")
}}};this.addOutputPort=function(e){if(d.logLevel>=jMidiAccessApi.LOG_LEVEL_DEBUG){console.log("jMidiAccessApi - Add OUTPUT port: "+e.name)
}if(!this.outputPortExists(e)){d.outputPorts.push(new jMidiAccessApiPort({id:e.id,name:e.name,type:"output",connected:false}))
}};this.getOutputPortIndexById=function(g){for(var f=0;f<d.outputPorts.length;f++){var e=d.outputPorts[f];
if(e.getId()==outputPort.id){return f}}return -1};this.isOutputConnectedById=function(e){var f=false;
d.outputPorts.forEach(function(g){if(g.getId()==e&&g.isConnected()){f=true}});return f
};this.outputPortExists=function(e){d.outputPorts.forEach(function(f){if(f.getId()==e.id){return true
}});return false};this.connectOutputPortByName=function(e){if(d.logLevel>=jMidiAccessApi.LOG_LEVEL_DEBUG){console.log("jMidiAccessApi - Connect OUTPUT port by name: "+e)
}d.outputPorts.forEach(function(f){if(f.getName()==e){f.setConnected(true);d.portConnectedCallback(f,d);
return true}});return false};this.disconnectOutputPortByName=function(e){if(d.logLevel>=jMidiAccessApi.LOG_LEVEL_DEBUG){console.log("jMidiAccessApi - Disconnect OUTPUT port by name: "+e)
}d.outputPorts.forEach(function(f){if(f.getName()==e){f.setConnected(false);d.portDisconnectedCallback(f,d);
return true}});return false};this.receive=function(e){if(d.logLevel>=jMidiAccessApi.LOG_LEVEL_ALL){console.log("jMidiAccessApi - Receive MIDIMessageEvent: ",e.data)
}d.receiveCallback(e)};this.send=function(e){if(d.logLevel>=jMidiAccessApi.LOG_LEVEL_ALL){console.log("jMidiAccessApi - Send MIDIMessageEvent: ",e.data)
}if(d.midiAccess){d.midiAccess.outputs.forEach(function(f){if(b.isOutputConnectedById(f.id)){f.send(e.data)
}})}else{if(d.logLevel>=jMidiAccessApi.LOG_LEVEL_DEBUG){console.log("jMidiAccessApi - send midiAccess is NULL")
}}};this.construct(c)};var jMidiAccessApiPort=function(b){var c={id:false,name:null,type:false,connected:false};
var a=this;this.construct=function(d){$.extend(c,d)};this.getId=function(){return c.id
};this.getName=function(){return c.name};this.isConnected=function(){return c.connected
};this.setConnected=function(d){c.connected=d};this.construct(b)};jMidiAccessApi.LOG_LEVEL_ERROR=0;
jMidiAccessApi.LOG_LEVEL_INFO=1;jMidiAccessApi.LOG_LEVEL_WARNING=2;jMidiAccessApi.LOG_LEVEL_DEBUG=3;
jMidiAccessApi.LOG_LEVEL_ALL=4;